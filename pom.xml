<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.bugs.aws</groupId>
  <artifactId>nosuchmethod</artifactId>
  <version>1.0-SNAPSHOT</version>

  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.2.2</version>
    <relativePath/> <!-- Look it up in the repository -->
  </parent>

  <properties>
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <aws.version>2.25.20</aws.version>
    <aws-cert.version>0.20.3</aws-cert.version>
    <slf4j-simple.version>2.0.12</slf4j-simple.version>

    <!-- Plugin dependencies -->
    <docker-maven-plugin.version>0.40.2</docker-maven-plugin.version>
    <jacoco-maven-plugin.version>0.8.10</jacoco-maven-plugin.version>

    <!-- On-demand Localstack properties. If changed, ensure README.md is updated to reflect the same version. -->
    <!-- Can't currently be upgraded past 0.11.2. See https://github.com/localstack/localstack/issues/3279#issuecomment-747079787 -->
    <on-demand-localstack-version>0.11.2</on-demand-localstack-version>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>software.amazon.awssdk</groupId>
        <artifactId>bom</artifactId>
        <version>${aws.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>software.amazon.awssdk.crt</groupId>
        <artifactId>aws-crt</artifactId>
        <version>${aws-cert.version}</version>
      </dependency>
      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-simple</artifactId>
        <version>${slf4j-simple.version}</version>
        <scope>runtime</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>software.amazon.awssdk</groupId>
      <artifactId>s3</artifactId>
    </dependency>
    <dependency>
      <groupId>software.amazon.awssdk</groupId>
      <artifactId>sqs</artifactId>
    </dependency>
    <dependency>
      <groupId>software.amazon.awssdk.crt</groupId>
      <artifactId>aws-crt</artifactId>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-simple</artifactId>
    </dependency>
  </dependencies>


  <build>
    <finalName>${project.artifactId}</finalName>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <executions>
          <execution>
            <id>enforce-banned-dependencies</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <bannedDependencies>
                  <excludes>
                    <exclude>org.slf4j:slf4j-log4j12</exclude>
                    <exclude>log4j:log4j</exclude>
                    <exclude>org.testng:testng</exclude>
                    <exclude>eu.codearte.catch-exception:catch-exception</exclude>
                  </excludes>
                  <searchTransitive>true</searchTransitive>
                </bannedDependencies>
              </rules>
              <fail>true</fail>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>${jacoco-maven-plugin.version}</version>
        <executions>
          <execution>
            <id>pre-integration-test</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
            <configuration>
              <!-- Sets the path to the file which contains the execution data. -->
              <destFile>${project.build.directory}/jacoco-it.exec</destFile>
              <excludes>
              </excludes>
            </configuration>
          </execution>
          <!--
              Ensures that the code coverage report for integration tests after
              integration tests have been run.
          -->
          <execution>
            <id>post-integration-test</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>report</goal>
            </goals>
            <configuration>
              <!-- Sets the path to the file which contains the execution data. -->
              <dataFile>${project.build.directory}/jacoco-it.exec</dataFile>
              <!-- Sets the output directory for the code coverage report. -->
              <outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <!-- According to https://almtools.ldschurch.org/fhconfluence/display/REP/Sonar, we need to add ${argLine} here -->
          <argLine/>
          <includes>
            <include>**/*CT.java</include>
          </includes>
          <systemPropertyVariables>
            <!--suppress UnresolvedMavenProperty -->
            <localstack.port>${on-demand-localstack-port}</localstack.port>
          </systemPropertyVariables>
        </configuration>
      </plugin>

      <!-- Initialize and start the on-demand Localstack instance before running tests and stop it afterward -->
      <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>${docker-maven-plugin.version}</version>
        <configuration>
          <images>
            <image>
              <name>localstack/localstack:${on-demand-localstack-version}</name>
              <alias>on-demand-localstack</alias>
              <run>
                <containerNamePattern>${project.artifactId}-%n-%i</containerNamePattern>
                <!--suppress UnresolvedMavenProperty -->
                <skip>${skipTests}</skip>
                <ports>
                  <!-- http://dmp.fabric8.io/#start-port-mapping, maps an ephemeral port to the internal docker port of 4566. Similar to `-p 12345:4566` when launching a container by hand. -->
                  <!-- Maven can then use this new exported "variable" ("on-demand-localstack-port") elsewhere, such as when defining which port to run CT against -->
                  <port>on-demand-localstack-port:4566</port>
                </ports>
                <env>
                  <!-- For details on available environment variables, see https://github.com/localstack/localstack#configurations -->
                  <SERVICES>sqs</SERVICES>
                </env>
                <wait>
                  <log>^Ready\.$</log>
                  <time>60000</time>
                </wait>
              </run>
            </image>
          </images>
        </configuration>
        <executions>
          <execution>
            <id>prepare-on-demand-localstack</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>start</goal>
            </goals>
          </execution>
          <execution>
            <id>remove-on-demand-localstack</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>stop</goal>
            </goals>
            <configuration>
              <removeVolumes>true</removeVolumes>
            </configuration>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>
</project>